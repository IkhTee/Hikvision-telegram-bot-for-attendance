# bot.py

import threading
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import db
from config import BOT_TOKEN
from handlers import get_handlers
import polling

# –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
stop_simulation = threading.Event()

def start_simulation_loop():
    from api_simulator import simulate_student_event

    while not stop_simulation.is_set():
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π student_id –∏–∑ students.json
        simulate_student_event("20201234", direction="Keldi")
        time.sleep(5)

    print("Simulation loop stopped")

async def stop_sim(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stop_simulation.set()
    await update.message.reply_text("üõë Simulation stopped")

async def stop_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    polling.stop()
    await update.message.reply_text("üõë Polling stopped")

def main():
    # 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
    db.init_db()

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    polling_thread = threading.Thread(target=polling.run_polling, daemon=True)
    polling_thread.start()

    # 3) –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    sim_thread = threading.Thread(target=start_simulation_loop, daemon=True)
    sim_thread.start()

    # 4) –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    for handler in get_handlers():
        app.add_handler(handler)

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
    app.add_handler(CommandHandler("stop_sim", stop_sim))
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling
    app.add_handler(CommandHandler("stop_poll", stop_poll))

    print("Bot started‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
