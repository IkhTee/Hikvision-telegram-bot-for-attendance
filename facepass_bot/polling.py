# polling.py
# –û–ø—Ä–æ—Å API —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–æ–¥–∏—Ç–µ–ª—è–º

import time
import requests
import db
import utils
from telegram import Bot
from config import BOT_TOKEN
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∏ –ë–î
bot = Bot(token=BOT_TOKEN)
db.init_db()

def handle_event(student_id: str, direction: str, timestamp: str = None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é.
    """
    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    db.add_event(student_id, direction)

    # 2) –ì–æ—Ç–æ–≤–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    ts = timestamp or datetime.now().strftime("%H:%M:%S")
    students = utils.load_students()
    for s in students:
        if s["student_id"] == student_id and s.get("telegram_chat_id"):
            msg = (
                f"üéì {s['name']}\n"
                f"‚è∞ {ts}\n"
                f"‚û°Ô∏è {direction}"
            )
            bot.send_message(chat_id=s["telegram_chat_id"], text=msg)
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {s['name']} ‚Äî {direction} –≤ {ts}")
            break

def run_polling():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç API –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥,
    –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö.
    """
    API_URL = "https://api.univer.example/events" 
    last_ts = None
    print("–ó–∞–ø—É—Å–∫ polling. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")

    while True:
        params = {"since": last_ts} if last_ts else {}
        try:
            resp = requests.get(API_URL, params=params, timeout=10)
            resp.raise_for_status()
            events = resp.json()  # list of dicts: {"student_id","direction","timestamp"}

            for ev in events:
                handle_event(ev["student_id"], ev["direction"], ev.get("timestamp"))
                last_ts = ev.get("timestamp", last_ts)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ polling: {e}")

        time.sleep(5)


if __name__ == "__main__":
    run_polling()
# polling.py
# –û–ø—Ä–æ—Å API —Ç—É—Ä–Ω–∏–∫–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–æ–¥–∏—Ç–µ–ª—è–º

import threading
import time
import requests
import db
import utils
from telegram import Bot
from config import BOT_TOKEN
from datetime import datetime

# –§–ª–∞–∂–æ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling
stop_polling = threading.Event()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –ë–î
bot = Bot(token=BOT_TOKEN)
db.init_db()

def handle_event(student_id: str, direction: str, timestamp: str = None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é.
    """
    ts_iso = timestamp or datetime.now().isoformat()
    db.add_event(student_id, direction, ts_iso)

    ts = datetime.fromisoformat(ts_iso).strftime("%H:%M:%S")
    students = utils.load_students()
    for s in students:
        if s["student_id"] == student_id and s.get("telegram_chat_id"):
            msg = (
                f"üéì {s['name']}\n"
                f"‚è∞ {ts}\n"
                f"‚û°Ô∏è {direction}"
            )
            bot.send_message(chat_id=s["telegram_chat_id"], text=msg)
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {s['name']} ‚Äî {direction} –≤ {ts}")
            break

def run_polling():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç API –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥,
    –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö.
    """
    API_URL = "https://api.univer.example/events"
    last_ts = None
    print("–ó–∞–ø—É—Å–∫ polling. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...")

    while not stop_polling.is_set():
        params = {"since": last_ts} if last_ts else {}
        try:
            resp = requests.get(API_URL, params=params, timeout=10)
            resp.raise_for_status()
            events = resp.json()  # [{"student_id","direction","timestamp"}, ‚Ä¶]

            for ev in events:
                handle_event(ev["student_id"], ev["direction"], ev.get("timestamp"))
                last_ts = ev.get("timestamp", last_ts)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ polling: {e}")

        # –ü–∞—É–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–∂–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        for _ in range(5):
            if stop_polling.is_set():
                break
            time.sleep(1)

    print("Polling loop stopped")

def stop():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å polling."""
    stop_polling.set()

if __name__ == "__main__":
    run_polling()
